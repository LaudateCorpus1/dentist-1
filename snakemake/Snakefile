import json
from math import *
from os.path import join
import re
import subprocess

include: "workflow_helper.py"

#-----------------------------------------------------------------------------
# BEGIN rules
#-----------------------------------------------------------------------------

localrules:
    ALL,
    self_alignment,
    reads2db,
    ref_vs_reads_alignment,
    extend_dentist_config_for_merge,
    merge


rule ALL:
    input: output_assembly


rule self_alignment_block:
    input:
        dentist_config_file,
        await_db_files(reference)
    output:
        temp(alignment_file(reference, block_a='{block_ref}', block_b='{block_reads}')),
        temp(alignment_file(reference, block_b='{block_ref}', block_a='{block_reads}'))
    params:
        aligncmd = lambda _: generate_options_for("self", dentist_config_file),
        reference_stub = db_stub(rel_to_workdir(reference)),
        dalign_flags = prepare_flags(dalign_flags)
    threads: max_threads
    shell:
        "cd {workdir_} && {params.aligncmd} {params.dalign_flags} {params.reference_stub}.{wildcards.block_ref} {params.reference_stub}.{wildcards.block_reads}"


rule self_alignment:
    input:
        await_db_files(reference),
        block_alignments = lambda _: block_alignments(reference)
    output:
        protected(self_alignment)
    shell:
        "LAmerge {output} {input[block_alignments]}"


rule mask_self:
    input:
        dentist_config_file,
        await_db_files(reference),
        self_alignment
    output:
        *mask_files(reference, self_mask)
    log: log_file("mask-self")
    shell:
        "dentist mask --config={dentist_config_file} {dentist_flags} {reference} {self_alignment} {self_mask} 2> {log}"


_fast2dam_checkpoint[reads] = "reads2db"
checkpoint reads2db:
    input: reads_fasta
    output: *db_files(reads)
    params:
        fasta2dazz = fasta2dazz_command(reads)
    shell:
        "{params.fasta2dazz} {output[0]} {input} && DBsplit {dbsplit_flags} {output[0]}"


rule ref_vs_reads_alignment_block:
    input:
        dentist_config_file,
        await_db_files(reference),
        lambda _: mask_files(reference, self_mask),
        await_db_files(reads)
    output: temp(alignment_file(reference, reads, block_b='{block_reads}'))
    params:
        aligncmd = lambda _: generate_options_for("reads", dentist_config_file),
        reference_stub = db_stub(rel_to_workdir(reference)),
        reads_stub = db_stub(rel_to_workdir(reads)),
        dalign_flags = prepare_flags(dalign_flags)
    threads: max_threads
    shell:
        "cd {workdir_} && {params.aligncmd} {params.dalign_flags} -m{self_mask} {params.reference_stub} {params.reads_stub}.{wildcards.block_reads}"


rule ref_vs_reads_alignment:
    input:
        await_db_files(reference),
        await_db_files(reads),
        block_alignments = lambda _: block_alignments(reference, reads, damapper=True)
    output:
        protected(ref_vs_reads_alignment)
    shell:
        "LAmerge {output} {input[block_alignments]}"


rule mask_reads:
    input:
        dentist_config_file,
        await_db_files(reference),
        await_db_files(reads),
        ref_vs_reads_alignment
    output:
        *mask_files(reference, reads_mask)
    log: log_file("mask-reads")
    shell:
        "dentist mask --config={dentist_config_file} {dentist_flags} {reference} {reads} {ref_vs_reads_alignment} {reads_mask} 2> {log}"


checkpoint collect:
    input:
        dentist_config_file,
        await_db_files(reference),
        await_db_files(reads),
        ref_vs_reads_alignment,
        *mask_files(reference, self_mask),
        *mask_files(reference, reads_mask)
    output:
        protected(pile_ups)
    params:
        main_threads = main_threads,
        auxiliary_threads = auxiliary_threads
    threads: max_threads
    log: log_file("collect")
    shell:
        "dentist collect --config={dentist_config_file} {dentist_flags} --threads={params.main_threads} --auxiliary-threads={params.auxiliary_threads} - - - - 2> {log}"


rule process:
    input:
        dentist_config_file,
        await_db_files(reference),
        await_db_files(reads),
        ref_vs_reads_alignment,
        await_pile_ups(),
        mask_files(reference, self_mask),
        mask_files(reference, reads_mask),
    output:
        temp(insertions_batch)
    params:
        batch_range = insertion_batch_range,
        main_threads = main_threads,
        auxiliary_threads = auxiliary_threads
    threads: max_threads
    log: log_file("process.{batch_id}")
    shell:
        "dentist process --config={dentist_config_file} {dentist_flags} --threads={params.main_threads} --auxiliary-threads={params.auxiliary_threads} --batch={params.batch_range} - - - - {output} 2> {log}"

rule extend_dentist_config_for_merge:
    input:
        dentist_config_file,
        await_pile_ups()
    output:
        temp(dentist_merge_config_file)
    run:
        merge_config = None
        with open(dentist_config_file, 'r') as base_config:
            merge_config = json.load(base_config)

        if "merge-insertions" not in merge_config:
            merge_config["merge-insertions"] = dict()
        merge_config["merge-insertions"]["insertions"] = insertions
        merge_config["merge-insertions"]["partitioned-insertions"] = list(insertions_batches())

        with open(output[0], 'w') as ext_config_file:
            json.dump(merge_config, ext_config_file)

        validate_dentist_config(output[0])


rule merge:
    input:
        dentist_merge_config_file,
        await_db_files(reference),
        await_db_files(reads),
        await_pile_ups(),
        insertions_batches = lambda _: insertions_batches()
    output:
        protected(insertions)
    log: log_file("merge")
    shell:
        "dentist merge --config={dentist_merge_config_file} {dentist_flags} - - 2> {log}"

rule output:
    input:
        dentist_config_file,
        await_db_files(reference),
        insertions
    output:
        output_assembly
    log: log_file("output")
    shell:
        "dentist output --config={dentist_config_file} {dentist_flags} - - - 2> {log}"

#-----------------------------------------------------------------------------
# END rules
#-----------------------------------------------------------------------------
