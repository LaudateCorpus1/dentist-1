#!/bin/sh

# Unofficial Bash Strict Mode (http://redsymbol.net/articles/unofficial-bash-strict-mode/)
set -euo pipefail
IFS=$'\n\t'

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"
num_commits="$(wc -l)"


function git_stash_push()
{
    local message='stashing changes to working tree before unit tests'
    git stash push --quiet --include-untracked -m "$message"
    echo "--- $message"
}


function git_checkout_head()
{
    git checkout HEAD .
}


function git_stash_pop()
{
    git_checkout_head
    git stash pop --quiet
    echo "--- restoring changes to working tree after unit tests"
}


function stash_working_tee_changes_for_testing()
{
    if (( $(git status --porcelain | wc -l) > 0 ));
    then
        git_stash_push && trap git_stash_pop exit
    else
        trap git_checkout_head exit
    fi
}


if (( num_commits > 0 ));
then
    stash_working_tee_changes_for_testing
    dub test --config=testing
fi
