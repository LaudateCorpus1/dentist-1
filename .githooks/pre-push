#!/bin/bash

# Unofficial Bash Strict Mode (http://redsymbol.net/articles/unofficial-bash-strict-mode/)
set -euo pipefail
IFS="$(printf '\n\t')"

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"
num_new_commits="$(grep -E '^refs/' | grep -cvE '^refs/tags/' || true)"
export git_root
git_root="$PWD"
ignored_links=""


create_testdir()
{
    testdir="$(mktemp --tmpdir -d dentist-testing-XXXXXX)"
    trap 'rm -rf "$testdir"' EXIT
}


set_submodule_upstream_to_local_path()
{
    git config --file=.gitmodules --get-regexp 'submodule\..*\.path' | \
        sed -E 's/^submodule\.([^.]+)\.path\s+(.*)$/git config submodule.\1.url "$git_root\/\2"/' | \
        sh -
}


locally_checkout_head()
{
    git clone --local --no-hardlinks --shallow-submodules "$git_root" "$PWD"
    set_submodule_upstream_to_local_path
    git submodule update --checkout --recursive
}


should_ignore_link()
{
    if [[ "$1" == *\$DENTIST_VERSION* ]]
    then
        # ignore links with env variable (usually from RELEASE.md)
        return 0
    fi

    [[ -v IGNORE_LINKS ]] || return 1

    awk -v"url=$1" '
        {
            for (i = 1; i <= NF; ++i)
                if ($i == url)
                    exit 0; # found URL -> report ignored
        }

        END {
            exit $i != url;
        }
    ' <<<"$IGNORE_LINKS"
}


check_link()
{
    local FILE="$1"
    local LINE="$2"
    local URL="$3"

    if should_ignore_link "$URL"
    then
        return
    elif ! curl --head --fail --silent --location "$URL" > /dev/null
    then
        echo "broken link at $FILE:$LINE: '$URL'"

        return 1
    fi
}


check_for_broken_links()
{
    PARALLEL=16
    FAILED=0

    echo -n 'testing links ... '
    for FILE in "$@"
    do
        while IFS=':' read -r FILE LINE URL
        do
            (( $(jobs | wc -l) < PARALLEL )) || { wait -n || (( ++FAILED )); }

            check_link "$FILE" "$LINE" "$URL" &
        done < <(grep -HnoP '(ftp|https?):[^[:space:]>\]\)]+' "$FILE")
        wait || (( ++FAILED ))
    done

    if (( FAILED == 0 ))
    then
        echo 'done'
    else
        echo 'failed'

        return 1
    fi
}


lint_snakefile()
(
    cd snakemake
    snakemake --lint=json --configfile=snakemake.yml | \
        jq -r 'map_values(length) | add | "Lints for Snakefile: \(.)"' || true
)


if [ "$num_new_commits" -gt 0 ];
then
    create_testdir
    cd "$testdir"
    locally_checkout_head
    check_for_broken_links ./*.md ./LICENSE
    lint_snakefile
    dub test --config=testing
fi
